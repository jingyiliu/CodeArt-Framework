<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeArt.DomainDriven.Extensions.Fakes</name>
    </assembly>
    <members>
        <member name="T:CodeArt.DomainDriven.Fakes.ShimDTObjectPro">
            <summary>CodeArt.DomainDriven.DTObjectPro 的填充码类型</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimDTObjectPro.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimDTObjectPro.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimDTObjectPro.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimDTObjectPro.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimDTObjectPro.CreateOf1StringIEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.IEnumerable{``0},CodeArt.DTO.DTObject})">
            <summary>设置 DTObjectPro.Create(String rowSchemaCode, IEnumerable`1&lt;!!0&gt; objs) 的 填充码</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimDTObjectPro.CreateOf1StringPageOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,CodeArt.DomainDriven.Page{``0},CodeArt.DTO.DTObject})">
            <summary>设置 DTObjectPro.Create(String rowSchemaCode, Page`1&lt;!!0&gt; page) 的 填充码</summary>
        </member>
        <member name="T:CodeArt.DomainDriven.Fakes.ShimExpandedProperty">
            <summary>CodeArt.DomainDriven.ExpandedProperty 的填充码类型</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.#ctor(CodeArt.DomainDriven.ExpandedProperty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.AllInstances.IsEmpty">
            <summary>设置 ExpandedProperty.IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.AllInstances.NameGet">
            <summary>设置 ExpandedProperty.get_Name() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.AllInstances.NameSetString">
            <summary>设置 ExpandedProperty.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.AllInstances.ValueGet">
            <summary>设置 ExpandedProperty.get_Value() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.AllInstances.ValueSetString">
            <summary>设置 ExpandedProperty.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(CodeArt.INullProxy)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(CodeArt.DomainDriven.IDomainObject)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(CodeArt.DomainDriven.INotNullObject)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(CodeArt.DomainDriven.IStateObject)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(CodeArt.DomainDriven.ISupportFixedRules)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(CodeArt.DomainDriven.IValueObject)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.Bind(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.ConstructorStringString">
            <summary>设置 ExpandedProperty.ExpandedProperty(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.IsEmpty">
            <summary>设置 ExpandedProperty.IsEmpty() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.NameGet">
            <summary>设置 ExpandedProperty.get_Name() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.NameSetString">
            <summary>设置 ExpandedProperty.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.StaticConstructor">
            <summary>设置 ExpandedProperty.ExpandedProperty() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.ValueGet">
            <summary>设置 ExpandedProperty.get_Value() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimExpandedProperty.ValueSetString">
            <summary>设置 ExpandedProperty.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider">
            <summary>CodeArt.DomainDriven.SqlClientConnectionProvider 的填充码类型</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.#ctor(CodeArt.DomainDriven.SqlClientConnectionProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="T:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.AllInstances.GetConnectionStringString">
            <summary>设置 SqlClientConnectionProvider.GetConnectionString(String connName) 的 填充码</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.Bind(CodeArt.Data.ISqlConnectionProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.Constructor">
            <summary>设置 SqlClientConnectionProvider.SqlClientConnectionProvider() 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.GetConnectionStringString">
            <summary>设置 SqlClientConnectionProvider.GetConnectionString(String connName) 的 填充码</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.ShimSqlClientConnectionProvider.StaticConstructor">
            <summary>设置 SqlClientConnectionProvider.SqlClientConnectionProvider() 的 填充码</summary>
        </member>
        <member name="T:CodeArt.DomainDriven.Fakes.StubExpandedProperty">
            <summary>CodeArt.DomainDriven.ExpandedProperty 的存根类型</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.StubExpandedProperty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.Equals(System.Object)">
            <summary>设置 ValueObject.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.EqualsObject">
            <summary>设置 ValueObject.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetDynamicMemberNames">
            <summary>设置 DynamicObject.GetDynamicMemberNames() 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetDynamicMemberNames01">
            <summary>设置 DynamicObject.GetDynamicMemberNames() 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetHashCode">
            <summary>设置 ValueObject.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetHashCode01">
            <summary>设置 ValueObject.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>设置 DynamicObject.GetMetaObject(Expression parameter) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetMetaObjectExpression">
            <summary>设置 DynamicObject.GetMetaObject(Expression parameter) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetValue(CodeArt.DomainDriven.DomainProperty)">
            <summary>设置 DomainObject.GetValue(DomainProperty property) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.GetValueDomainProperty">
            <summary>设置 DomainObject.GetValue(DomainProperty property) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.InitializeStub">
            <summary>初始化 type StubExpandedProperty 的新实例</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.StubExpandedProperty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.StubExpandedProperty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.MarkClean">
            <summary>设置 DomainObject.MarkClean() 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.MarkClean01">
            <summary>设置 DomainObject.MarkClean() 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.ReadOnlyCheckUp">
            <summary>设置 ValueObject.ReadOnlyCheckUp() 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.ReadOnlyCheckUp01">
            <summary>设置 ValueObject.ReadOnlyCheckUp() 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.SetValue(CodeArt.DomainDriven.DomainProperty,System.Object)">
            <summary>设置 DomainObject.SetValue(DomainProperty property, Object value) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.SetValueDomainPropertyObject">
            <summary>设置 DomainObject.SetValue(DomainProperty property, Object value) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>设置 DynamicObject.TryBinaryOperation(BinaryOperationBinder binder, Object arg, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryBinaryOperationBinaryOperationBinderObjectObjectOut">
            <summary>设置 DynamicObject.TryBinaryOperation(BinaryOperationBinder binder, Object arg, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>设置 DomainObject.TryConvert(ConvertBinder binder, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryConvertConvertBinderObjectOut">
            <summary>设置 DomainObject.TryConvert(ConvertBinder binder, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
            <summary>设置 DynamicObject.TryCreateInstance(CreateInstanceBinder binder, Object[] args, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryCreateInstanceCreateInstanceBinderObjectArrayObjectOut">
            <summary>设置 DynamicObject.TryCreateInstance(CreateInstanceBinder binder, Object[] args, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
            <summary>设置 DynamicObject.TryDeleteIndex(DeleteIndexBinder binder, Object[] indexes) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryDeleteIndexDeleteIndexBinderObjectArray">
            <summary>设置 DynamicObject.TryDeleteIndex(DeleteIndexBinder binder, Object[] indexes) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
            <summary>设置 DynamicObject.TryDeleteMember(DeleteMemberBinder binder) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryDeleteMemberDeleteMemberBinder">
            <summary>设置 DynamicObject.TryDeleteMember(DeleteMemberBinder binder) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>设置 DynamicObject.TryGetIndex(GetIndexBinder binder, Object[] indexes, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryGetIndexGetIndexBinderObjectArrayObjectOut">
            <summary>设置 DynamicObject.TryGetIndex(GetIndexBinder binder, Object[] indexes, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>设置 DomainObject.TryGetMember(GetMemberBinder binder, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryGetMemberGetMemberBinderObjectOut">
            <summary>设置 DomainObject.TryGetMember(GetMemberBinder binder, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>设置 DynamicObject.TryInvoke(InvokeBinder binder, Object[] args, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryInvokeInvokeBinderObjectArrayObjectOut">
            <summary>设置 DynamicObject.TryInvoke(InvokeBinder binder, Object[] args, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>设置 DynamicObject.TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryInvokeMemberInvokeMemberBinderObjectArrayObjectOut">
            <summary>设置 DynamicObject.TryInvokeMember(InvokeMemberBinder binder, Object[] args, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>设置 DynamicObject.TrySetIndex(SetIndexBinder binder, Object[] indexes, Object value) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TrySetIndexSetIndexBinderObjectArrayObject">
            <summary>设置 DynamicObject.TrySetIndex(SetIndexBinder binder, Object[] indexes, Object value) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>设置 DomainObject.TrySetMember(SetMemberBinder binder, Object value) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TrySetMemberSetMemberBinderObject">
            <summary>设置 DomainObject.TrySetMember(SetMemberBinder binder, Object value) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
            <summary>设置 DynamicObject.TryUnaryOperation(UnaryOperationBinder binder, Object&amp; result) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.TryUnaryOperationUnaryOperationBinderObjectOut">
            <summary>设置 DynamicObject.TryUnaryOperation(UnaryOperationBinder binder, Object&amp; result) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubExpandedProperty.Validate">
            <summary>设置 DomainObject.Validate() 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubExpandedProperty.Validate01">
            <summary>设置 DomainObject.Validate() 的 stub</summary>
        </member>
        <member name="T:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider">
            <summary>CodeArt.DomainDriven.SqlClientConnectionProvider 的存根类型</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.GetConnectionString(System.String)">
            <summary>设置 SqlClientConnectionProvider.GetConnectionString(String connName) 的 存根</summary>
        </member>
        <member name="F:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.GetConnectionStringString">
            <summary>设置 SqlClientConnectionProvider.GetConnectionString(String connName) 的 stub</summary>
        </member>
        <member name="M:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.InitializeStub">
            <summary>初始化 type StubSqlClientConnectionProvider 的新实例</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:CodeArt.DomainDriven.Fakes.StubSqlClientConnectionProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
