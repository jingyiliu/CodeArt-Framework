
var $$request, $$storage;
var $$ = (function () {

    //#region 基础

    var OBJECT = "object", FUNCTION = "function", UNDEFINED = "undefined", J = jQuery;

    function isHostMethod(o, p) {
        var t = typeof o[p];
        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == "unknown";
    }

    function isHostObject(o, p) {
        return !!(typeof o[p] == OBJECT && o[p]);
    }

    function isHostProperty(o, p) {
        return typeof o[p] != UNDEFINED;
    }

    function createMultiplePropertyTest(testFunc) {
        return function (o, props) {
            var i = props.length;
            while (i--) {
                if (!testFunc(o, props[i])) {
                    return false;
                }
            }
            return true;
        };
    }

    var areHostMethods = createMultiplePropertyTest(isHostMethod);
    var areHostObjects = createMultiplePropertyTest(isHostObject);
    var areHostProperties = createMultiplePropertyTest(isHostProperty);

    function type(o) {
        var ty = typeof o;
        if (ty == 'object') {
            if (o == null) return "null";
            if (o.constructor == Array) return "array";
            if (o.constructor == Date) return "date";
            if (isEvent(o)) return "event";
            if (o.constructor == Blob) return "blob";
        }
        return ty;
    }

    function isEvent(o) {
        return isHostProperty(o, "srcElement")
                || isHostProperty(o, "fromElement")
                || isHostProperty(o, "shiftKey")
                || isHostProperty(o, "ctrlKey");
    }

    function empty(v) {//判断是否为空值
        return v == undefined || v == null;
    }

    function equals(v0, v1) {
        //如果遇到字符串和其他类型的数据对比，我们仅看值是否相等，而不考虑数据类型
        var ty0 = type(v0), ty1 = type(v1);
        if (ty0 == "string" || ty1 == "string") {
            v0 = v0 + "";
            v1 = v1 + "";
        }
        if (type(v0) != type(v1)) return false;
        if (v0.equals) return v0.equals(v1);
        return v0 == v1;
    }

    //#endregion

    var api = function (e) {
        if (empty(e)) return;
        if (e.isProxy) return e;
        var ty = type(e);
        if (ty == "object") { //直接传入对象，意味着需要创建该对象的代理
            if (isHostMethod(e, "getAttribute") || (isHostMethod(e, "ent") && e.ent() || e == document)) { //如果是dom对象，或者是代理对象
                return createProxy(e);
            }
        }
        else {
            var o = J(e);
            if (o.length == 1) return api(o[0]);
            throw new Error("没有找到" + e + "或类型不正确，无法生成代理对象");
        }
    };

    var modules = {};

    api.initialized = false;
    api.supported = true;
    api.util = {
        isHostMethod: isHostMethod,
        isHostObject: isHostObject,
        isHostProperty: isHostProperty,
        areHostMethods: areHostMethods,
        areHostObjects: areHostObjects,
        areHostProperties: areHostProperties,
        type: type,
        empty: empty,
        equals: equals
    };
    api.modules = modules;
    api.config = {
        alertOnFail: true,
        alertOnWarn: true
    };

    //#region 信息输出

    function consoleLog(msg) {
        if (isHostObject(window, "console") && isHostMethod(window.console, "log")) {
            window.console.log(msg);
        }
    }

    function alertOrLog(msg, shouldAlert) {
        if (shouldAlert) {
            window.alert(msg);
        } else {
            consoleLog(msg);
        }
    }

    function fail(reason) {
        api.initialized = true;
        api.supported = false;
        alertOrLog("codeArt框架不被您的浏览器兼容. 原因: " + reason, api.config.alertOnFail);
    }

    api.fail = fail;

    function warn(msg) {
        alertOrLog("警告: " + msg, api.config.alertOnWarn);
    }

    api.warn = warn;

    if ({}.hasOwnProperty) {
        api.util.extend = function (obj, props, deep) {
            var o, p;
            for (var i in props) {
                if (props.hasOwnProperty(i)) {
                    o = obj[i];
                    p = props[i];
                    if (deep && o !== null && typeof o == "object" && p !== null && typeof p == "object") {
                        api.util.extend(o, p, true);
                    }
                    obj[i] = p;
                }
            }
            return obj;
        };
    } else {
        fail("hasOwnProperty 不被支持");
    }

    //#endregion

    function initModules() {
        if (api.initialized) return;

        api.initialized = true;

        //初始化模块
        var module, errorMessage;
        for (var moduleName in modules) {
            if ((module = modules[moduleName]) instanceof Module) {
                module.init();
            }
        }
    }

    //#region 模块注入

    function Module(name, initializer) {
        this.name = name;
        this.initialized = false;
        this.supported = false;
        this.init = initializer;
    }

    Module.prototype = {
        fail: function (reason) {
            this.initialized = true;
            this.supported = false;
            alertOrLog("加载模块 '" + this.name + "' 失败: " + reason, api.config.alertOnFail);
        },
        warn: function (msg) {
            api.warn("模块 " + this.name + ": " + msg);
        },
        deprecationNotice: function (deprecated, replacement) {
            api.warn("过时: " + deprecated + " 在模块 " + this.name + "中已过时. 请使用 "
                + replacement + " 代替");
        },
        createError: function (msg) {
            alertOrLog("模块 " + this.name + " 发生错误: " + msg, api.config.alertOnFail);
        }
    };

    api.createModule = function (name, initFunc) {
        var module = new Module(name, function () {
            if (!module.initialized) {
                module.initialized = true;
                try {
                    initFunc(api, module);
                    module.supported = true;
                } catch (ex) {
                    var errorMessage = "加载模块 '" + name + "' 失败: " + getErrorDesc(ex);
                    //consoleLog(errorMessage);
                    throw new Error(errorMessage);
                }
            }
        });
        modules[name] = module;
    };

    function getErrorDesc(ex) {
        return ex.message || ex.description || String(ex);
    }

    api.requireModules = function (moduleNames) {
        for (var i = 0, len = moduleNames.length, module, moduleName; i < len; ++i) {
            moduleName = moduleNames[i];

            module = modules[moduleName];
            if (!module || !(module instanceof Module)) {
                throw new Error("没有找到模块 '" + moduleName + "'");
            }

            module.init();

            if (!module.supported) {
                throw new Error("不支持模块 '" + moduleName + "'");
            }
        }
    };

    var _gods = [];
    api.registerGod = function (gods) { //注册上帝（代理能力的给予者）^_^
        _gods.push(gods);
    }

    //#endregion

    //#region 处理代理对象

    function initProxy(o) { //初始化整个文档，或者某个区域，为其所有定义了代理属性的dom创建代理对象，并赋予相关能力
        if (!o) o = document.body;
        if (type(o) == "array") {
            J.each(o, function (i, c) {
                initProxy(c);//再初始化子节点
            });
        } else if (o.each) {
            o.each(function (i, c) {
                initProxy(c);
            });
        }
        else {
            var pro = createProxy(o, false); //尝试为自身创建代理
            if (pro) return;//如果已创建代理，那么子项不需要再初始化，因为在pro内部会初始化
            initProxy(J(o).children());//初始化子节点
        }
    }

    function getProxy(o) { //获取对象的代理信息
        o = J(o)[0];
        if (o.__type_proxy) return o; //o本身就为代理对象
        return o.__proxy ? o.__proxy : null;
    }

    function createProxy(o, force) { //force:强制创建代理对象，如果为false，那么只有定义了data-proxy属性，才会创建
        if (empty(force)) force = true;
        o = J(o);
        var pro = getProxy(o);
        if (pro) return pro;

        var s, ent = o[0];
        if (!(s = o.attr("data-proxy"))) {
            if (!force) return null;//没有代理属性，又不是强制的，因此不创建
            s = "{}";
            o.attr("data-proxy", s);
        }
        eval("pro=" + s + ";");
        ent.__proxy = pro;
        pro.__ent = ent;
        pro.__type_proxy = true;
        pro.isProxy = true;
        giveProxy(pro); //赋予代理的能力
        if (!pro.closeProxy) initProxy(o.children()); //初始化代理范围内的子节点
        giveCapability(pro);//最后赋予代理中手工指定的能力
        if (pro.id) o.attr("id", pro.id);

        var dt;
        if (dt = pro.ref) {//定义了引用，则从引用中导入属性
            for (var e in dt) { if (!pro[e]) pro[e] = dt[e]; } //空缺的属性，由引用导入
            delete pro.ref;
        }
        pro.initialized = true; //代理对象初始化完成
        return pro;
    }

    function clearProxy(e) {
        var l = J(e).children();
        l.each(function (i, t) { clearProxy(t); });
        if (e.__proxy) e.__proxy = null;
    }

    function giveCapability(o) {
        var g = o.give;
        if (g) {
            if (type(g) != "array") { g.give(o); return; }
            g.each(function (i, c) {
                c.give(o);
            });//每个能力对象会实现方法give
        }
    }

    function giveProxy(p) {
        J.each(_gods, function (i, g) {
            g.give(p);
        });
    }

    api.init = initProxy; //由外界决定，是否初始化代理

    api.registerGod(new function () {
        this.give = function (p) {
            p.ent = function () { return this.__ent; }
            p.getJquery = function () { return $(p.ent()); }
            p.attr = function (n, v) {
                if (type(n) == "object") {
                    for (var e in n) {
                        this.attr(e, n[e]);
                    }
                    return this;
                } else {
                    var ent = this.ent();
                    if (!ent) return this;
                    if (n.indexOf('@') > -1) {//自定义属性
                        n = n.substr(1);
                        var pro = createProxy(ent);
                        if (empty(v)) return pro[n];
                        else {
                            pro[n] = v;
                            if (n == "id") this.attr("id", v);//如果设置代理编号，为了提高检索性能，映射代理编号到dom编号上
                            return this;
                        }
                    } else {
                        if (n == "innerText") return innerText(ent, v);
                        if (empty(v)) {
                            var t = ent[n];
                            return empty(t) ? ent.getAttribute(n) : t;
                        }
                        else {
                            ent.setAttribute(n, v);
                            ent[n] = v;
                            if (n == "id") {//如果设置代理编号，为了提高检索性能，映射代理编号到dom编号上
                                var pro = createProxy(ent);
                                if (pro) pro.id = v;
                            }
                            return this;
                        }
                    }
                }
                function innerText(o, v) {
                    var t = o.innerText, n = "innerText";
                    if (empty(t)) n = "textContent";
                    if (!empty(v)) o[n] = v;
                    return o[n];
                }
            }
            p.removeAttr = function (n) {
                var ent = this[0];
                if (n.indexOf('@') > -1) {
                    n = n.substr(1);
                    var pro = createProxy(ent);
                    delete pro[n];
                } else {
                    var t = ent.removeAttribute;
                    if (t) t(n); else delete o[n];
                }
            }
        }
    });

    //$$ = function (o) {
    //    return $(o).proxy();
    //}

    //#endregion

    api.util.extend(api, J);
    api.util.getProxy = function (o) { //获取代理对象，并且，会自动创建设置了proxy属性的对象的代理对象
        var p = getProxy(o);
        if (!p) p = createProxy(o, false);
        return p;
    };
    api.util.clearProxy = clearProxy;
    var _currentId = 0;
    api.util.getId = function () {
        return _currentId++;
    };

    J(document).ready(function () { initModules(); });

    //#region 扩展getJquery对象
    J.fn.extend({
        ent: function () { return this[0]; },
        proxy: function () {
            var o = this[0];
            return createProxy(o);//如果没有代理对象，则创建，如果已存在，直接返回，不会重复创建代理对象
        },
        getJquery: function () { return this; }, //此处是为了与proxy对象保持统一的方法
        mapNull: function () {
            return empty(this[0]) ? null : this;
        }
    });
    //#endregion

    return api;
})();

$$.createModule("Util", function (api, module) {
    var J = jQuery, util = api.util, type = util.type, empty = util.empty;

    //#region 字符串扩展
    var sp = String.prototype;
    sp.trim = function () { return this.replace(/(^\s*)|(\s*$)/g, "") };
    sp.toUpper = function (n) {
        if (!n) return this.toUpperCase();
        return this.substr(0, n).toUpperCase() + this.substr(n);
    };
    sp.toLower = function (n) {
        if (!n) return this.toLowerCase();
        return this.substr(0, n).toLowerCase() + this.substr(n);
    };
    sp.pad = function (l) {
        return function (n) {
            var num = this;
            return (0 >= (n = n - num.toString().length)) ? num : (l[n] || (l[n] = Array(n + 1).join(0))) + num;
        }
    }([]);

    sp.replaceAll = function (t0, t1, ignoreCase) {
        if (!RegExp.prototype.isPrototypeOf(t0)) {
            return this.replace(new RegExp(t0, (ignoreCase ? "gi" : "g")), t1);
        } else {
            return this.replace(t0, t1);
        }
    }

    if (!window.btoa) {
        var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        window.btoa = function (c) {
            var d = "";
            var m, k, h = "";
            var l, j, g, f = "";
            var e = 0;
            do {
                m = c.charCodeAt(e++);
                k = c.charCodeAt(e++);
                h = c.charCodeAt(e++);
                l = m >> 2;
                j = ((m & 3) << 4) | (k >> 4);
                g = ((k & 15) << 2) | (h >> 6);
                f = h & 63;
                if (isNaN(k)) {
                    g = f = 64
                } else {
                    if (isNaN(h)) {
                        f = 64
                    }
                }
                d = d + a.charAt(l) + a.charAt(j) + a.charAt(g) + a.charAt(f);
                m = k = h = "";
                l = j = g = f = ""
            } while (e < c.length);
            return d;
        };
        window.atob = function (c) {
            var d = "";
            var m, k, h = "";
            var l, j, g, f = "";
            var e = 0;
            do {
                l = a.indexOf(c.charAt(e++));
                if (l < 0) {
                    continue
                }
                j = a.indexOf(c.charAt(e++));
                if (j < 0) {
                    continue
                }
                g = a.indexOf(c.charAt(e++));
                if (g < 0) {
                    continue
                }
                f = a.indexOf(c.charAt(e++));
                if (f < 0) {
                    continue
                }
                m = (l << 2) | (j >> 4);
                k = ((j & 15) << 4) | (g >> 2);
                h = ((g & 3) << 6) | f;
                d += String.fromCharCode(m);
                if (g != 64) {
                    d += String.fromCharCode(k)
                }
                if (f != 64) {
                    d += String.fromCharCode(h)
                }
                m = k = h = "";
                l = j = g = f = ""
            } while (e < c.length);
            return d;
        }
    }

    sp.toBase64 = function () {
        return window.btoa(unescape(encodeURIComponent(this)))
    };

    sp.fromBase64 = function () {
        return decodeURIComponent(escape(window.atob(this)));
    };

    //#endregion

    //#region 集合扩展
    var ap = Array.prototype;
    ap.each = function (m) {
        var v;
        for (var i = 0; i < this.length; i++) {
            var c = this[i];
            if (m.apply(c, [i, c]) == false) break; //显示传递false,代表中断循环
        }
    }
    ap.filterEx = function (f, c) {
        var l = [];
        for (var i = 0; i < this.length; i++) {
            var o = this[i];
            if (f.apply(o, [i, o])) {
                l.push(o);
                if (c && l.length == c) break;
            }
        }
        return l;
    }
    ap.first = function (f) {
        if (f) return this.filterEx(f, 1).first();
        return this.length > 0 ? $(this[0]) : null;
    }
    ap.contains = function (f) {
        return !empty(this.first(f));
    }
    ap.distinct = function (f) { //返回非重复序列,f是比较函数，相等返回true
        if (!f) f = function (v0, v1) { return v0 == v1; }
        var l = [], s = this;
        s.each(function (i, v0) {
            var r = l.first(function (j, v1) { return f(v0, v1); });
            if (!r) l.push(v0);
        });
        return l;
    }
    ap.last = function () { return this.length > 0 ? $(this[this.length - 1]) : null; }
    ap.remove = function (p) {
        if (empty(p)) return;
        var l = this, le = l.length;
        if (type(p) == "function") {//设置了比较函数，p代表需要移除的值
            var ef = p, ags = [null], as = arguments;
            for (var i = 1; i < as.length; i++) { if (!empty(as[i])) ags.push(as[i]); }
            for (var i = 0; i < le; i++) {
                ags[0] = l[i];
                if (ef.apply(l[i], ags)) {
                    l.remove(i);
                    i--; //归位
                    le--;
                }
            }
            return l;
        } else {//没有设置比较函数，p代表位置
            if (p < 0 || p >= le) return;
            for (var i = p; i < le - 1; i++) l[i] = l[i + 1];
            return l.pop();
        }
    }
    ap.toArray = function () { return this; } //为了保持与jquery的扩展统一接口
    ap.equals = function (v) {
        if (this.length != v.length) return false;
        for (var i = 0; i < this.length; i++) {
            if (!util.equals(this[i], v[i])) return false;
        }
        return true;
    }
    ap.clone = function () {
        var len = this.length;
        return this.concat(this).splice(len);
    }
    //#endregion

    //#region 日期扩展
    Date.prototype.clone = function () { return createDate(this.get()); }
    Date.prototype.get = function () {
        return {
            year: this.getFullYear(), month: this.getMonth(), date: this.getDate(), hour: this.getHours(),
            minute: this.getMinutes(), second: this.getSeconds(), milliseconds: this.getMilliseconds()
        };
    }
    Date.prototype.equals = function (v) { return this.getTime() == v.getTime(); }
    function createDate(v) { return new Date(v.year, v.month, v.date, v.hour, v.minute, v.second); };
    Date.prototype.format = function (f) {
        var d = this.get(), l = [];
        for (var i = 0; i < f.length; i++) {
            var e = f[i];
            switch (e) {
                case "y": l.push(d.year); break;
                case "M": l.push((d.month + 1 + '').pad(2)); break;
                case "d": l.push((d.date + '').pad(2)); break;
                case "h": l.push((d.hour + '').pad(2)); break;
                case "m": l.push((d.minute + '').pad(2)); break;
                case "s": l.push((d.second + '').pad(2)); break;
                default: l.push(e);
            }
        }
        return l.join('');
    }

    //#endregion

    util.object = {
        clone: function (o) {
            var oc = o.constructor == Object ? new o.constructor() : new o.constructor(o.valueOf());
            for (var key in o) {
                var ocv = oc[key], tcv = o[key];
                if (ocv != tcv) {
                    oc[key] = typeof (tcv) == 'object' ? util.object.clone(tcv) : tcv;
                }
            }
            oc.toString = o.toString;
            oc.valueOf = o.valueOf;
            return oc;
        },
        inherit: function (o, base) { //模拟继承，不论是虚方法，还是this方法，都可以被重写，但是虚方法可以在子类被调用，this方法不行
            var args = [], as = arguments;
            for (var i = 2; i < as.length; i++) { args.push(as[i]); }
            base.apply(o, args);
            var p = base.prototype;
            for (var e in p) {
                o[e] = p[e];
            }
            p = o.constructor.prototype; //自身的原型
            for (var e in p) {
                o[e] = p[e]; //重置自身原型提供的方法，这些方法是不被base重写的，同名方法覆盖父方法
            }
        },
        virtual: function (base, fn, func) { //为base类型声明一个虚方法
            var p = base.prototype;
            p[fn] = func || function () { throw new Error("方法" + fn + "是抽象的"); }
        },
        callvir: function (o, base, fn) { //调用虚方法,fn:基类的方法名称
            var args = [], as = arguments;
            for (var i = 3; i < as.length; i++) { args.push(as[i]); }
            var f = base.prototype[fn];
            if (!f) throw new Error("无法执行方法" + fn + ",必须定义在原型链上！");
            return f.apply(o, args);
        },
        eachValue: function (o, f) {
            for (var n in o) {
                var v = o[n];
                if (util.type(v) == "function") continue;
                f.apply(o, [n, v]);
            }
        }
    };

    util.json = {};
    util.json.serialize = function (obj) {
        var v = empty(obj) ? '' : JSON.stringify(obj).replace(/\\n/g, '\n');
        return v;
    }
    util.json.deserialize = function (str) {//请保证str是json格式的{....}
        if (empty(str) || str.length == 0) return {};
        var o;
        eval("o=" + str + ";");
        return o;
    }
    var loc = util.location = {};
    loc.addUrl = function (url, state) {
        window.history.pushState(state, '', url);
    };
    loc.replaceUrl = function (url, state) {
        window.history.replaceState(state, '', url);
    };
    loc.updateQuery = function (state, replace) { //更新参数
        var q = $.query, t = q;
        util.object.eachValue(state, function (n, v) {
            if (!empty(v)) t = t.set(n, v);
        });
        var url = location.pathname + t.toString();
        if (replace) util.location.replaceUrl(url, state); else util.location.addUrl(url, state);
    };
    /*
    本地视图代表一种模式：由url参数组成视图的状态
    第一次进入视图时，更新url地址栏（替换）
    第二次以后进入视图，则用追加的形式更新地址栏，当浏览器后退了
    那么会恢复视图，并且触发恢复视图的事件
    恢复视图不会更新url地址
    这个模式适用于ajax和url地址同步改变
    */
    loc.view = function (name, onrestore) { //
        var my = this;
        this.name = name;
        this.restoring = false; //正在恢复中
        this.firstWork = true; //第一次工作
        this.update = function (state) { //state是用来描述视图的状态
            if (my.restoring) { //正在恢复中，代表恢复已完毕
                my.restoring = false;
                return;
            }
            var replace = this.firstWork;//第一次工作，那么需要替换当前url,否则以add形式追加url
            $.util.location.updateQuery(state, replace); //将state作为参数替换url,并且将state作为状态存储到历史记录中
            this.firstWork = false;
        }

        $(window).on("popstate." + name, function (e) {
            my.restoring = true;
            onrestore(e.originalEvent.state);
        });
    }
    loc.back = function () { window.history.back(); } //简单的封装，以后可以扩展
    $location = loc;

    var $b = util.browser = {};

    (function () {
        var u = navigator.userAgent.toLowerCase(), s;
        (s = u.match(/msie ([\d.]+)/)) ? $b.ie = s[1] :
                (s = u.match(/firefox\/([\d.]+)/)) ? $b.firefox = s[1] :
                (s = u.match(/chrome\/([\d.]+)/)) ? $b.chrome = s[1] :
                (s = u.match(/opera.([\d.]+)/)) ? $b.opera = s[1] :
                (s = u.match(/version\/([\d.]+).*safari/)) ? $b.safari = s[1] : 0;

    })();

    api.registerGod(new function () {
        this.give = function (p) {
            p.clone = function (onlyNode) { //代理中的节点克隆 
                var e = this.ent(), t = e.cloneNode(true);
                util.clearProxy(t);//防止克隆了__proxy属性
                if (onlyNode == true) return t;//仅克隆节点结构，并不执行初始化操作,返回dom节点
                api.init(t);
                return $$(t);//代理的克隆方法，返回代理
            }
            p.find = function (exp) { return this.getJquery().find(exp); }
            var scrollCurrentTop;
            p.tag = function () {
                var t = this.ent().tagName;
                return t ? t.toLowerCase() : "";
            }
            p.scrollHeight = function () {
                var ent = this.ent();
                return scroll(ent, "height");
            }
            p.scrollWidth = function () {
                var ent = this.ent();
                return scroll(ent, "width");
            }
            p.scrollTopTo = function (target) {//target:滚动条需要定位的对象
                var t = J(target);
                if (this.scrollHeight() > 0) this.scrollTop(t.offset().top - this.offset().top);
            }
            p.scrollHidden = function () {
                var o = this.ent();
                if (o == document) o = document.documentElement;
                if ($b.firefox) {
                    var t = J(document).scrollTop();
                    o.style.overflow = "hidden";
                    J(document).scrollTop(t);//防止滚动条自动滑动
                    scrollCurrentTop = t;
                } else
                    o.style.overflow = "hidden";
            }
            p.scrollResume = function () {
                var o = this.ent();
                if (o == document) o = document.documentElement;
                if ($b.firefox) {
                    o.style.overflow = "";
                    J(document).scrollTop(scrollCurrentTop);//防止滚动条自动滑动
                } else
                    o.style.overflow = "";
            }
            p.existScroll = function () { //存在滚动条
                var o = this.getJquery(), rawTop = o.scrollTop();
                if (rawTop > 0) return true;
                var top = 10, r;
                o.scrollTop(10);
                r = o.scrollTop() > 0;
                o.scrollTop(0);
                return r;
            }
            p.scrollFull = function (offset) {  //滚动条是否达到底部
                offset = offset || 0;//修正，离底部的距离
                var t = this.getJquery(), pageHeight = t.height(), lookHeight = $(window).height();//页面高度，浏览器可视高度
                return (t.scrollTop() + offset) >= (pageHeight - lookHeight);
            }
            p.floating = function (p) {
                var o = this.getJquery(), enId = api.util.getId();

                function exec(e) {
                    var target = e.data.target, para = e.data.para, flag;
                    if (target.css("display") == "none") return;
                    var targetHeight = target.outerHeight(true), offset = para.offset, innerOffset = para.innerOffset || 0;
                    var start = offset.top(), end = $(document).height() - offset.bottom();
                    var scrollTop = $(document).scrollTop();
                    if (scrollTop < start) {
                        target.css({ "position": "inherit", "top": "auto" });
                        flag = "stayTop";
                    }
                    else {
                        target.css({ "position": "fixed", "top": innerOffset + "px" });
                        flag = "floating";
                    }
                    var targetBottom = target.offset().top + targetHeight;
                    if (targetBottom > end) {
                        target.css({ "position": "fixed", "top": (end - targetBottom) + "px" });
                        flag = "stayBottom";
                    }
                    if (para.handler) para.handler(flag);
                }

                $(window).off("scroll.floating_" + enId);
                $(window).on("scroll.floating_" + enId, { target: o, para: p }, function (e) { exec(e); });
                $(window).off("resize.floating_" + enId);
                $(window).on("resize.floating_" + enId, { target: o, para: p }, function (e) { exec(e); });
            }

            function scroll(o, n) {
                if (o == document) {
                    o = o.documentElement;
                }
                var pn = "scroll" + n.charAt(0).toUpperCase() + n.substr(1);
                return o[pn];
            }

        }
    });
});

$$.createModule("Ajax", function (api, module) {
    api.requireModules(["Util"]);

    var J = jQuery, util = api.util, type = util.type, empty = util.empty, object = util.object;

    var serializer = new Serializer();

    (function () {

        function Request() {
            var my = this, _ser = serializer;

            this.post = this.submit = function (arg) {
                arg = parseArg(arg);
                var p = {
                    cache: false,
                    type: "POST",
                    url: arg.url,
                    async: arg.async,
                    data: _ser.serialize(my.getData(arg,my.paras)),
                    beforeSend: function (xhr) {
                        xhr.responseType = "text";
                        xhr.setRequestHeader("PostAction", arg.action ? arg.action : '');
                        execEvent(my, "beforeSend", [my, xhr]);
                    },
                    dataFilter: arg.dataFilter || function (rawData, dataType) { return _ser.deserialize(rawData); }
                };
                initEvent(my, p);
                copyEvent(my, p);
                J.ajax(p);
            }

            my.paras = {};
            my.add = function (n, v) {
                if (type(n) == "object") {
                    var o = n;
                    object.eachValue(o, function (on, ov) {
                        my.add(on, ov);
                    });
                }
                this.paras[n] = v;
            }; //增加参数
            my.clear = function () { this.paras = {}; }; //清空参数


            this.get = function (arg) {
                arg = parseArg(arg);
                var p = {
                    cache: false,
                    type: "GET",
                    url: arg.url,
                    async: arg.async,
                    data: _ser.serialize(my.getData(arg,my.paras)),
                    beforeSend: function (xhr) {
                        xhr.responseType = "text";
                        xhr.onprogress = function (e) { execEvent(my, "progress", [e]); }
                        execEvent(my, "beforeSend", [my, xhr]);
                    },
                    dataFilter: function (rawData, dataType) { return rawData; }
                };
                initEvent(my, p);
                copyEvent(my, p);
                J.ajax(p);
            }

            this.formData = function (arg) {
                arg = parseArg(arg);
                var p = {
                    cache: false,
                    type: "POST",
                    url: arg.url,
                    async: arg.async,
                    data: arg.data, //formData
                    contentType: false,//必须false才会自动加上正确的Content-Type 
                    processData: false,//必须false才会避开jQuery对 formdata 的默认处理, XMLHttpRequest会对 formdata 进行正确的处理 
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("PostAction", arg.action ? arg.action : '');
                        execEvent(my, "beforeSend", [my, xhr]);
                    },
                    dataFilter: arg.dataFilter || function (rawData, dataType) { return _ser.deserialize(rawData); }
                };
                initEvent(my, p);
                copyEvent(my, p);
                J.ajax(p);
            }

            this.getData = function (arg, paras) { //可以实例化重写
                return Request.getData(arg, paras);
            }

        }

        Request.getData = function (arg,paras) { return paras; } //外界可以重写

        $$.ajax = {};
        $$.ajax.request = Request;
    })();

    function Serializer() {
        this.deserialize = function (text) {
            return util.json.deserialize(text);
        }
        this.serialize = function (obj) { return util.json.serialize(obj); }
    }

    function parseArg(arg) { //分析参数
        if (empty(arg)) return {};
        if (type(arg) == "string") { arg = { url: arg } };
        if (!arg.url) arg.url = window.location.href;
        if (empty(arg.async)) arg.async = true;
        return arg;
    }

    function initEvent(obj, para) {
        fillDefaultEvent(obj);
        para.success = obj.success;
        para.complete = obj.complete;
        para.progress = obj.progress;
        para.error = obj.error ? function (xhr, msg, o) { obj.error(getErrorMessage(xhr)); } : processError;


        function processError(xhr, msg, obj) { //或d
            bootbox.alert({
                buttons: {
                    ok: {
                        label: '确定',
                    }
                },
                message: getErrorMessage(xhr),
                title: "错误提示"
            });
        }
    }

    function getErrorMessage(xhr) {
        var txt;
        if (xhr.status == "error" && xhr.message) txt = xhr.message;
        else try { txt = xhr.responseText; } catch (e) { } //读取xhr.responseText有可能报错
        if (txt) return txt;
        else {
            return [
                xhr.response ? xhr.response : '',
                xhr.statusText ? xhr.statusText : '',
                xhr.status ? xhr.status : '',
            ].join(',')
        }
    }

    function execEvent(obj, n, args) {
        var t;
        if (t = obj[n]) {
            return t.apply(obj, args);
        }
    }

    var _events = ["beforeSend", "dataFilter", "error", "success", "complete", "progress"];
    function copyEvent(source, target, force) { //拷贝source的ajax事件到target ,force:是否强制赋予目标对象事件
        if (empty(source) || empty(target)) return;
        var t;
        _events.each(function (i, n) {
            if (t = source[n]) {
                if (force) target[n] = t;
                else {
                    if (!target[n]) target[n] = t;
                }
            }//target没有对应的事件才拷贝
        });
    }

    $$.ajax.util = {
        copyEvent: copyEvent,
        getErrorMessage: getErrorMessage
    }

    function fillDefaultEvent(target) { //用系统的默认事件，填充没有设置的事件
        copyEvent(_defaultEvent, target);
    }

    var _defaultEvent = new function () { //默认事件
        var my = this;
        _events.each(function (i, n) {
            my[n] = function () { }
        });
    }

    $$.config.setAjaxEvent = function (evt) {
        _defaultEvent = evt;
    }
    $$.wrapper = {};//提供扩展用
    $$request = $$.ajax.request;
});


$$.createModule("storage", function (api, module) {
    api.requireModules(["Util"]);

    var J = jQuery, util = api.util, type = util.type, empty = util.empty, object = util.object;

    var storage = function (n, v, p) {
        var isRead = arguments.length == 1;
        if (arguments.length == 2) {
            if (type(v) != 'string') {
                p = v;
                v = null;
                isRead = true;
            }
        }

        if (!p) p = {};
        if (!p.mode) p.mode = 'local';
        if (p.mode == 'cookie' || !window.localStorage || !window.sessionStorage) return isRead ? $.cookie(n) : $.cookie(n, v, p);
        var h = p.mode == 'local' ? window.localStorage : window.sessionStorage;
        return isRead ? h.getItem(n) : h.setItem(n, v);
    }

    storage.remove = function (n,p) {
        if (!p) p = {};
        if (!p.mode) p.mode = 'local';
        if (p.mode == 'cookie' || !window.localStorage || !window.sessionStorage) $.cookie(n, null);
        else {
            var h = p.mode == 'local' ? window.localStorage : window.sessionStorage;
            h.removeItem(n);
        }
    }

    $$storage = $$.storage = storage;
});
$$.createModule("Component", function (api, module) {
    api.requireModules(["Util", "Ajax"]);

    var J = jQuery, util = api.util, type = util.type, empty = util.empty, getProxy = util.getProxy;
    var $o = util.object, $vir = $o.virtual;
    $$.component = {};

    //绑定组件
    (function () {
        $$.databind = $$.component.databind = function () {
            this.give = function (o) { //o是代理对象
                o.bind = function (data) {
                    exec(this.ent(), data, false, true);
                    this.data = data;
                    if (this.onbind) this.onbind();
                }
                o.clear = function () {
                    exec(this.ent(), {}, false, true);
                    this.data = null;
                    if (this.onclear) this.onclear();
                }
                parse(o.ent());
            }

            //#region 执行绑定

            function exec(o, data, noloops, force) { //o是dom对象
                var po = getProxy(o);
                if (!force && po && po.bind) return; //防止两个binging组件，嵌套后受到影响
                var into = true, cg;
                if (po && (cg = po.__bind_cg)) {
                    var t;
                    if ((t = cg.loops) && !noloops) { loops(o, data[t], cg); into = false; }
                    else if (t = cg.object) { object(o, data[t], cg); into = false; }
                    else if (t = cg.binds) binds(o, data, cg);
                }
                if (into) {
                    var l = J(o).children(), clps = "";
                    l.each(function (i, c) {
                        var co = getProxy(c), ccg, isBind, copy;
                        if (co) {
                            ccg = co.__bind_cg;
                            isBind = co.bind;
                        }
                        if (ccg && ccg.loops) {//如果是循环节点，则只解析第一个
                            if (ccg.loops == clps) copy = true;
                            else clps = ccg.loops;
                        }
                        if (!copy && !isBind) exec(c, data);
                    });
                }
            }

            function loops(o, d, cg) {
                if (!d) d = [];
                var last = ts = $(o), loopsName = $$(ts[0]).loops;
                while ((ts = ts.next()) && ts.length > 0 && ($$(ts[0]).loops == loopsName)) {
                    last = ts;
                    ts = last;
                }
                last = last.proxy().ent();

                var ms, po = $$(o);
                if (po.increment) {//increment:自增模式
                    var ds = d.length, ms = [];
                    for (var k = 0; k < ds; k++) {
                        last = cg.newMember(last);
                        ms.push(last);
                    }
                }
                else {
                    var ds = d.length - cg.getMembers(o).length;
                    for (var k = 0; k < ds; k++) {
                        last = cg.newMember(last);
                    }
                    if (ds < 0) { while (ds++) cg.removeMember(o); } //删除多余的
                    ms = cg.getMembers(o);
                }

                var ctx = { count: d.length };

                for (var i = 0, len = d.length; i < len; i++) {
                    var m = ms[i], jm = $(m), v = d[i], mo = jm.proxy(), dis = mo.display;
                    jm.css({ display: empty(dis) ? "block" : dis });
                    mo.data = v;
                    exec(m, v, true);
                    ctx.index = i;
                    if (mo.onbind) mo.onbind.apply(mo, [mo, v, ctx]); //绑定结束时触发的事件，注意，由于是绑定结束时触发，所以如果有内嵌的loops，则是内嵌的loops全部执行完毕后才触发
                }
            }

            function object(o, d, cg) {
                if (cg.binds) binds(o, d, cg);
                var l = J(o).children();
                l.each(function (i, e) { exec(e, d); });
            }

            function binds(o, d, cg) {
                var st = cg.binds, po = $(o).proxy(), ext = { html: "innerHTML", text: "innerText" }, t;
                for (var e in st) {
                    var n = st[e], v;
                    if (type(n) != "string") continue;
                    eval("v=d." + n + ";"); //不要写成v=d[n],因为这样就不支持v=d.data.title了
                    bindValue(po, e, v);
                }
                po.data = d;
                if (po.format) {
                    var field = st["text"] || st["html"], fd = d[field];
                    po.attr("innerText", fd ? fd.format(po.format) : '');
                }
                if (po.onbind) po.onbind.apply(po, [po, d]); //绑定结束时触发的事件
            }

            function bindValue(po, n, v) {
                if (n == "text") po.attr("innerText", v);
                else if (n == "html") po.attr("innerHTML", v);
                else if (n == "display") po.css("display", v ? "block" : "none");
                else if (n == "visibility") po.css("visibility", v ? "visible" : "hidden");
                else po.attr(n, v); //如果写了@就是自定义属性的绑定
            }

            //#endregion
        }

        function parse(o) {//元素所在的父亲或者父亲以上节点，是否为loops
            var l = ["loops", "object", "binds"], cg, po = getProxy(o);
            if (po && !po.__bind_cg) {//解析过，就不再解析
                //解析绑定标签
                l.each(function (i, n) {
                    var v = po[n];
                    if (v) {
                        if (!cg) cg = new config(o);
                        cg[n] = v;
                        if (n == "loops") {
                            po.getJquery().css({ display: "none" });
                        }
                    }
                });
                if (cg) po.__bind_cg = cg;
            }
            l = J(o).children();
            l.each(function (i, e) { parse(e); });
        }

        function config(e) {
            var my = this;
            my.binds = null;
            my.loops = null;
            my.object = null;

            my.elem = $(e).proxy().clone(true); //克隆的结果是dom，因为参数为true

            my.temp = document.createElement("div");
            my.getMembers = function (e) {//获得当前有效的成员
                var f = J(e).parent(), l = J(f).children(), ol = [];
                l.each(function (i, c) {
                    var co = getProxy(c), cg = co ? co.__bind_cg : null;
                    if (cg && cg.loops == my.loops) ol.push(c);
                });
                return ol;
            }
            my.newMember = function (last) {
                var l = J(my.temp).children();
                if (l.length > 0) {
                    var t = l[0];
                    $(last).after(t)
                    return t;
                }
                else {
                    var t = my.elem.cloneNode(true);
                    $(last).after(t);//先追加到dom中
                    $(t); //再初始化t,避免bug
                    parse(t);
                    return t;
                }
            }
            my.removeMember = function (e) {
                var l = my.getMembers(e), ind = l.length - 1;
                if (ind == 0) l[0].style.display = "none"; //最后一个元素不移除，只隐藏，保证数据为0时，还有dom可供分析
                else J(my.temp).append(l[ind]);
            }
        }
    })();

    var copyEvent = $$.ajax.util.copyEvent;
    //表单组件
    (function () {
        $$.form = $$.component.form = function (formName, validate) {
            var my = this, _inputs = [], _formName = formName, _validate = validate;

            my.setValidate = function (validate) {
                _validate = validate;
            }

            my.inputs = function () { return _inputs; }

            my.input = function (n) {
                return _inputs.first(function (i, e) { return $$(e).name == n; });
            }

            my.append = function (l) {//追加输入组件
                if (type(l) != "array") l = [l];
                var ps = _inputs;

                l.each(function (i, p) {
                    p = $(p).proxy();
                    var n = p.name || p.getJquery().prop("name"), op = my.input(n);
                    if (empty(n)) {
                        throw Error("组件没有定义name，无法加入form" + p.getJquery().prop("outerHTML")); return;
                    }
                    if (!op) {
                        giveInput(p);
                        ps.push(p);
                        p.formOwner = my;
                    }
                    else if (p != op.proxy()) { throw Error("名称为" + n + "的输入组件已存在！"); return; }
                });
            }

            function giveInput(p) {//给予 get、set,isBrowsed 方法
                if (!p.get) p.get = function () {
                    return this.getJquery().val();
                }
                if (!p.set) p.set = function (v) {
                    this.getJquery().val(v);
                }
                if (!p.isBrowsed) p.isBrowsed = function () {
                    return false;
                }
                if (empty(p.name))
                    p.name = p.getJquery().prop("name");
            }

            my.remove = function (l) {//移除输入元素，l为元素名称或dom对象的集合
                if (type(l) != "array") l = [l];
                var ps = _inputs, rp = [];//被移除的元素
                l.each(function (i, n) {
                    var p = util.type(n) == 'string' ? my.input(n) : $$(n);
                    if (p) {
                        p.formOwner = null;
                        ps.remove(function (e, n) {
                            return $$(e).name == n || $$(e).ent() == n;
                        }, n);
                        rp.push(p);
                    }
                });
                return rp;//返回被移除的对象
            }

            my.validate = function (b) {//b:是否重绘控件,t:是否alert错误
                if (type(b) == 'array') {
                    var l = b;
                    l.each(function (i, d) {
                        var n = d.name;
                        _inputs.each(function (i, e) {
                            var p = $$(e);
                            if (p.name == n) {
                                p.validate(d);
                                return false;
                            }
                        });
                    });
                }
                else {
                    var r = new result();
                    _inputs.each(function (i, e) {
                        exec($$(e), "validate", function (p) {
                            r.add(p.validate(b));
                        });
                    });
                    if (!r.satisfied()) {
                        execCheck(r);
                        return r;//如果组件验证失败,那么报错,不用继续执行自定义验证
                    }
                    if (_validate) {
                        var e = my._entProxy || my;//my._entProxy是dom模式下的对象,该对象是该dom的代理对象
                        try {
                            var t = _validate.apply(e, [e]);//自定义验证
                            if (t != true && !empty(t)) {
                                var m = type(t) == "string" ? t : "自定义验证出错";
                                r.add(new ValidateResult("error", m, false));
                            }
                        } catch (ex) {
                            r.add(new ValidateResult("error", ex.message, false));
                        }
                    }
                    execCheck(r);
                    return r;
                }
            }

            function execCheck(vr) {
                var check = (my._entProxy && my._entProxy.check) || my.check; //触发验证事件
                if (check) check(vr);
            }

            function ValidateResult(s,m,st) { //class
                var _s = s, _m = m, _st = st;
                this.status = function () { return _s; };
                this.message = function () { return _m; };
                this.satisfied = function () { return _st; }
            }

            my.submit = function (tg, vl) {//vl:是额外需要提交的值,键值对
                if (!tg) throw new Error("没有设置目标，无法提交表单");
                var vr = my.validate(true);
                if (!vr.satisfied()) return;
                var req = new $$.ajax.request();
                copyEvent(my._entProxy, my, true);
                var success = my.success;
                if (success) {
                    //截获事件
                    my.success = function (r) {
                        _inputs.each(function (i, e) {
                            exec($$(e), "clean", function (p) {
                                p.clean(true);//设置对象为干净的
                            });
                        });
                        success(r);
                    }
                }
                copyEvent(my, req);
                _inputs.each(function (i, e) {
                    exec($$(e), "get", function (p) {
                        if (!p.needSubmit || p.needSubmit()) {
                            req.add(p.name, p.get());
                        }
                    });
                });
                if (vl) {
                    util.object.eachValue(vl, function (n, v) {
                        req.add(n, v);
                    });
                }
                req.submit(tg);
            }

            my.set = my.accept = function (data, b) {//接收数据,b:是否验证
                for (var e in data) {
                    var p = my.input(e);
                    if (p) {
                        p.proxy().set(data[e], b);
                        p.proxy().clean(true);//设置对象为干净的
                    }
                }
                this.data = data;
            }

            my.browse = function (b) {
                _inputs.each(function (i, e) {
                    exec($$(e), "browse", function (p) { p.browse(b); });
                });
            }

            my.reset = function () {
                _inputs.each(function (i, e) {
                    exec($$(e), "reset", function (p) { p.reset(); });
                });
            }

            my.get = function (n) {
                var v = {};
                _inputs.each(function (i, e) {
                    exec($$(e), "get", function (p) {
                        if (!p.needSubmit || p.needSubmit()) {
                            v[p.name] = p.get();
                        }
                    });
                });
                return v;
            }

            my.disabled = function (b) {
                _inputs.each(function (i, e) {
                    exec($$(e), "disabled", function (p) { p.disabled(b); });
                });
            }

            my.readonly = function (b) {
                _inputs.each(function (e) {
                    exec($$(e), "readonly", function (p) { p.readonly(b); });
                });
            }

            //#region 实现give接口
            var _formId;

            my.give = function (o) {
                var oj = o.getJquery();
                _formMethods.each(function (i, n) {
                    o[n] = my[n];
                });
                var t;//表单名称
                if (t = o.name) _formName = t;
                if (t = oj.attr("name")) _formName = t;
                if (t = oj.attr("id")) _formId = t;
                if (o.uiParas && (t = o.uiParas["validate"])) _validate = t;
                my.collect(o.ent());
                my._entProxy = o; //form关联的实体对象的代理
            }

            my.collect = function (target) { //将target区域的组件信息，收集到form中
                my.append(internal(target, _formName));
                if (!empty(_formName)) my.append(external(target, document.body, _formName)); //定义了表单名称，还要收集外部控件
            }

            function internal(c, n, ps) {//n:表单名称
                ps = ps || [];
                var l = J(c).children();
                l.each(function (i, e) {
                    var pe = getProxy(e);
                    if (pe) {
                        var fn = pe.form;
                        if (fn == 'none') return;//显示指明form="none"，意为不参与提交
                        if (empty(fn)) internal(e, n, ps);
                        else if (fn == '' || fn == n) my.append(pe);
                    }
                    else internal(e, n, ps);
                });
                return ps;
            }

            function external(fe, c, n, ps) {//f:表单实体,n:表单名称
                ps = ps || [];
                if (fe == c) return ps;
                var l = J(c).children();
                l.each(function (i, e) {
                    var pe = getProxy(e);
                    if (pe && pe.form == n) my.append(pe);
                    else external(fe, e, n, ps);
                });
                return ps;
            }

            //#endregion

            //#region 实现 接口 （支持脚本视图）

            my.scriptElement = function () { //获得脚本元素的元数据
                var my = this, v = my.get();
                var p = new function () {
                    this.validate = function () {
                        return my.validate(true);
                    }
                }

                return { id: _formId || '', metadata: { value: v }, eventProcessor: p };
            }

            //#endregion
        }

        function exec(p, n, f) { //验证组件p是否实现了方法n,如果实现了，则执行函数f
            if (p[n]) { f(p); return }
            //throw new Error("组件" + p.name + "没有实现方法" + n);
        }

        function result() { //验证结果
            var _satisfied = true, _infos = [];
            this.success = this.satisfied = function () { return _satisfied; };
            this.add = function (info) {
                _infos.push(info);
                if (info.status() == "error") {
                    _satisfied = false;
                    _status = "error";
                }
            }
            var _status = "success";
            this.status = function () {
                return _status;
            }
            this.info = function () { return _infos; }
            this.errorText = function () {
                var l = [];
                _infos.each(function (i, t) {
                    if (t.status() == "error") {
                        if (l.length > 0) l.push('、');
                        l.push(t.message());
                    }
                });
                return l.join('');
            }
            this.message = function () {
                return this.errorText();
            }
        }

        var _formMethods = ["inputs", "input", "append", "remove", "validate", "submit", "set", "accept", "reset", "get", "disabled", "setValidate", "browse", "scriptElement"];
    })();

    //组件基类
    (function () {
        $$.component.painter = function (methods) { //methods自定义方法
            var my = this;
            this.methods = methods || {};
            my.draw = function (o, type) {
                var fn = "drawBy" + type.toUpper(1), f = this.methods[fn] || this[fn];
                if (!f) throw new Error("没有找到绘制器的方法" + fn);
                var args = [o];
                for (var i = 2, le = arguments.length; i < le; i++) { args.push(arguments[i]); }
                f.apply(this, args);
            }
        }

        $vir($$.component.painter, "find", function (o, n) {
            if (!n) return null;
            var fn = "find" + n.toUpper(1), f = this.methods[fn] || this[fn];
            if (f) return f.apply(this, [o]);
            return o.find("*[data-name='" + n + "']").first().mapNull();
        });

        var $ui = $$.component.ui = function (painter) {
            var my = this;
            my.painter = painter;
            this.find = function (o, n) { return my.painter.find(o, n); }
            this.draw = function (o) {
                var l = [];
                for (var i = 0, len = arguments.length; i < len; i++) { l.push(arguments[i]); }
                my.painter.draw.apply(my.painter, l);//动态参数
            }
        }

        $vir($ui, "give", function (o) {
            var my = this;
            o.para = function (n, v) {
                if (empty(v)) return this.uiParas[n];
                this.uiParas[n] = v;
            };
            o.execEvent = function (n, ags) { //执行组件事件
                if (!this.initialized) return; //只有组件初始化完成了，才会触发事件
                if (this.__closeEvent) return; //手工关闭了事件触发，那么不触发事件
                var f = this.getEvent(n);
                if (f) {
                    if (!ags) ags = [];
                    return f.apply(this, ags);
                }
            };
            o.getEvent = function (n) {
                if (n.length > 2 && n.substr(0, 2) != 'on') n = ['on', n].join('');
                return this.para(n);
            }
            o.setEvent = function (n, f) {
                if (n.length > 2 && n.substr(0, 2) != 'on') n = ['on', n].join('');
                this.para(n, f);
            }
            o.__closeEvent = false;
            o.closeEvent = function () { //关闭事件触发
                this.__closeEvent = true;
            }
            o.openEvent = function () { //开启事件触发
                this.__closeEvent = false;
            }
            o.on = function (n, f) { return this.setEvent(n, f); }
        });
    })();

    //所有参与form提交的input的基类
    (function () {
        var $input = $$.component.input = function (painter, validator) { //painter 绘制控件、查找元素
            $o.inherit(this, $$.component.ui, painter);
            var my = this;
            my.validator = validator;
            this.validate = function (o) { return my.validator.validate(o); }
        }

        //#region input组件的虚方法
        $vir($input, "give", function (o) {
            $o.callvir(this, $$.component.ui, "give", o);
            var my = this;
            o.label = function () { return $$(this).para("call") || this.find("label").first().text(); };
            o.readOnly = function (b) { my.execReadOnly(this, b); };//作为输入控件，可以设置属性是否只读
            o.disabled = function (b) { my.execDisabled(this, b); };//作为输入控件，可以设置是否禁用
            o.set = function (v, b) {
                if (this.clean()) this.cleanValue(this.get()); //如果组件是干净的，那么在赋值之前记录组件的干净值
                my.execSet(this, v);
                if (b != false) this.validate(true);
                this.syncBrowse();//调用该方法同步数据
            };//作为输入控件，可以赋值
            o.get = function () { return my.execGet(this); };//作为输入控件，可以取值
            o.reset = function () {
                my.execReset(this);
                my.draw(this, "reset");//重绘控件
            };
            o.validate = function (b) { //b:是否重绘控件
                if (type(b) == 'object') {//主动设置模式
                    var result = b;
                    my.draw(this, "validate", result);//更新视图
                    return result;
                }
                else {
                    if (this.para("validate") == false) return;
                    var result = my.validate(this);
                    if (b) my.draw(this, "validate", result);//更新视图
                    return result;
                }
            };//可以自我验证
            o.validator = my.validator;//外界可以查看验证器
            o.browse = function (b) {
                var bc = my.find(this, "browseContainer");
                if (!bc) return;
                if (b == false) {
                    if ($$(bc).only) return; //设置了只读，因此不切换
                }
                else if (empty(b)) {
                    b = this.isBrowsed();
                }

                if (b) {
                    //设置为浏览模式，如果组件为不干净的，那么重新还原干净值
                    if (!this.clean()) {
                        var cv = this.cleanValue();
                        if (!empty(cv)) this.set(cv);
                        this.clean(true);
                    }
                }
                this.isBrowsed(b); //记录状态
                this.syncBrowse(b);
            }//重绘控件
            o.syncBrowse = function (b) { //当b为不设置时，仅同步数据，不切换状态
                var d = my.execBrowseData(this);
                my.draw(this, "browse", b, d);
            }
            o.isBrowsed = function (b) {
                if (empty(b)) {
                    var v = this.para("browseStatus");
                    if (empty(v)) {
                        var bc = my.find(this, "browseContainer");
                        v = bc ? true : false; //当有browse节点时，默认开启browse模式
                        this.para("browseStatus", v);
                    }
                    return this.para("browseStatus");
                }
                this.para("browseStatus", b);
            }
            o.needSubmit = function () {  //在浏览模式是否提交数据
                var s = this.isBrowsed();
                if (!s) return true; //沒有設置瀏覽模式，那麼會提交
                var bc = my.find(this, "browseContainer");
                return $$(bc).submit || false; //設置了瀏覽模式,則要判斷submit是否為true
            }
            o.clean = function (b) { //获取或设置组件的干净状态
                if (b == true) this.cleanValue(this.get());
                else {
                    var cv = this.cleanValue();
                    if (empty(cv)) return true;//组件默认为干净的
                    return util.equals(cv, this.get());
                }
            }
            o.cleanValue = function (v) {
                if (empty(v)) return this.__cleanValue;
                this.__cleanValue = v;
            }

            o.scriptElement = function () { //获得脚本元素的元数据
                var my = this, v = my.get();
                var p = new function () {
                    this.validate = function () {
                        return my.validate(true);
                    }
                }

                return {
                    id: my.getJquery().prop("id") || '',
                    metadata: { value: v },
                    eventProcessor: p
                };
            }

            if (my.onGive) { my.onGive(o); }
        });

        $vir($input, "execReadOnly");
        $vir($input, "execDisabled");
        $vir($input, "execSet");
        $vir($input, "execGet");
        $vir($input, "execValidate");
        $vir($input, "execReset");
        $vir($input, "execBrowseData");
        //#endregion

        //#region 验证器的基类

        $input.validator = function () {
            var _handlers = [];
            this.addHandler = function (h) { _handlers.push(h); } //增加验证处理器

            this.validate = function (o) {
                var lab = o.label(), v = o.get();
                try {
                    _handlers.each(function (i, h) {
                        h.exec(o, lab, v);
                    });
                    customValidate(o, lab, v);
                }
                catch (e) {
                    var r = new function () {
                        this.status = function () { return "error"; }
                        var _msg;
                        this.message = function (v) { if (v) _msg = v; else return _msg; }
                        this.satisfied = function () { return false; }
                    }
                    r.message(e.message);
                    return r;
                }
                return new function (e) {
                    this.status = function () { return "success"; }
                    this.satisfied = function () { return true; }
                    this.message = function () { return ''; }
                }
            }

            function customValidate(o, n, v) { //自定义验证
                var val = o.para("validate");
                if (val) val.apply(o, [o, n, v, my]);
            }
        }

        //#endregion

        //#region 绘画器的基类

        $input.painter = function (methods) { //methods自定义方法
            $o.inherit(this, $$.component.painter, methods);
            var my = this;
            my.findWarn = function (o) {
                return o.find("*[name='warn']").first().mapNull() || this.find(o, "help");
            }

            //#region 根据验证状态绘制

            my.drawByValidate = function (o, result) {
                if (!result) return;
                var s = result.status(), msg = result.message();
                saveResume(o);
                if (s == "success") {//验证状态是成功的，但是需要进一步确认，是否需要还原组件为初始状态
                    if (my.isResume(o)) s = "resume";
                }
                if (s == "resume" || s == "success") msg = o.__resumeMsg;
                my["on" + s.toUpper(1)](o, msg);
            }

            function saveResume(o) { //记录正常情况下的状态
                if (empty(o.__resumeMsg)) o.__resumeMsg = my.getResumeMsg(o);
            }

            my.isResume = function (o) {
                var v = o.get();
                return empty(v) || v.length == 0;
            }
            my.getResumeMsg = function (o) {
                var m = my.find(o, "help");
                return m ? m.text() : "";
            }

            var _setMsg = function (o, msg) {
                var h = my.find(o, "help")
                if (h) h.text(msg ? msg : "");
                var j = o.getJquery();
                j.removeClass("has-success");
                j.removeClass("has-error");
            }
            my.onError = function (o, msg) {
                _setMsg(o, msg);
                o.getJquery().addClass("has-error");
                if (o.para("pulsate")) {
                    o.getJquery().pulsate({
                        color: "#bf1c56",
                        repeat: false
                    });
                }
            }
            my.onSuccess = function (o, msg) {
                _setMsg(o, msg);
                o.getJquery().addClass("has-success");
            }
            my.onResume = function (o, msg, finder) {
                _setMsg(o, msg);
            }

            my.drawByBrowse = function (o, b, d) {
                var bc = my.find(o, "browseContainer"), cc = my.find(o, "coreContainer");
                if (bc) {
                    bc.html(d);  //无论如何都会同步数据
                    if (o.isBrowsed()) my.drawByReset(o);
                    else o.validate(true);
                    if (empty(b)) return;//不执行切换
                    if (b) {
                        bc.show();
                        cc.hide();
                    }
                    else {
                        bc.hide();
                        cc.show();
                    }
                }
            }
        }

        $vir($input.painter, "drawByReset", function (o) {
            this.drawByValidate(o, {
                status: function () { return "resume"; },
                message: function () { return ''; },
                satisfied: function () { return true; }
            });
        });

        //#endregion

    })();

    //通用的翻页组件
    (function () {
        $$.pageTurn = $$.component.pageTurn = function (p) {
            var my = this, _s = new status(p.size), _distance = p.distance;
            var _changed = p.changed;
            this.size = function () {
                return _s.size();
            }
            this.count = function (v) { //页总数
                return _s.count();
            }
            this.index = function () {
                return _s.index();
            }

            var _ent = $('<ul class="pagination"></ul>');
            this.ent = function () { return _ent; }

            this.update = function (dataCount) {
                var pageIndex = _s.index(), pageSize = _s.size();
                var pageCount = parseInt(dataCount / pageSize);
                if (dataCount % pageSize > 0) pageCount++;
                _s.count(pageCount); //更新页面总数

                var code = [];
                code.push('<li><a data-name="page-prev" href="javascript:;"><i class="fa fa-angle-left"></i></a></li>');
                for (var i = pageIndex - _distance; i < pageIndex; i++) {
                    if (i >= 0) {
                        code.push('<li><a data-name="page-index" href="javascript:;">' + (i + 1) + '</a></li>');
                    }
                }
                code.push('<li class="active"><a href="javascript:;">' + (pageIndex + 1) + '</a></li>');
                for (var i = pageIndex + 1; i < (pageIndex + 1 + _distance) ; i++) {
                    if (i < pageCount) {
                        code.push('<li><a data-name="page-index" href="javascript:;">' + (i + 1) + '</a></li>');
                    }
                }
                code.push('<li><a data-name="page-next" href="javascript:;"><i class="fa fa-angle-right"></i></a></li>');
                _ent.html(code.join(''));

                _ent.off('click', "a[data-name='page-prev']");
                _ent.on('click', "a[data-name='page-prev']", { o: my }, function (e) {
                    if (_s.prev()) _changed(my);
                });

                _ent.off('click', "a[data-name='page-next']");
                _ent.on('click', "a[data-name='page-next']", { o: my }, function (e) {
                    if (_s.next()) _changed(my);
                });

                _ent.off('click', "a[data-name='page-index']");
                _ent.on('click', "a[data-name='page-index']", { o: my }, function (e) {
                    var pi = parseInt($(this).text()) - 1;
                    if (_s.index(pi)) _changed(my);
                });
            }
        }

        function status(size) {
            var my = this, _index = 0, _size = size, _count = 0;
            this.size = function () {
                return _size;
            }
            this.count = function (v) { //页总数
                if (!v) return _count;
                _count = v;
            }

            this.index = function (v) {
                if (empty(v)) return _index;
                if (v < 0 || v >= _count) return false;
                _index = v;
                return true;
            }
            this.prev = function () {
                if (_index <= 0) return false;
                _index--;
                return true;
            }
            this.next = function () {
                if (_index >= (_count - 1)) return false;
                _index++;
                return true;
            }
            this.clear = function () {
                _index = 0;
            }
        }
    })();


    $$.component.util = {};
    $$.component.util.initQuery = function (o) { //这是一个工具方法，用于解析查询中的query参数
        var q = o.para("paras");
        var paras = parse(q);
        o.para("paras", paras);
        o.query = function (p) { //查询参数
            if (p) this.para("paras", p);
            else return this.para("paras");
        }
        o.addQuery = function (p) { //增加查询参数
            var ps = this.query();
            var newParas = parse([p]);
            newParas.each(function (i, e) {
                ps.push(e);
            });
            this.query(ps);
        }

        function parse(q) {
            var paras = [];
            q.each(function (i, e) {
                if (e.id) {
                    var t = $(["#", e.id].join('')).mapNull();
                    if (!t) throw new Error("没有找到编号为" + e.id + "的DOM元素");
                    t = t.proxy();
                    if (!t.get) {
                        t.get = function () {
                            if (!empty(this.value)) return this.value;
                            if (!empty(this.attr("value"))) return this.attr("value");
                            if (!empty(this.text())) return this.text();
                        }
                    }
                    if (!t.getName) t.getName = function () {
                        if (!empty(this.name)) return this.name;
                        if (!empty(this.attr("name"))) return this.attr("name");
                    }
                    paras.push(t);
                } else if (e.provider) {
                    var pro = e.provider;

                    function Provider(o, pro) {
                        var _obj = o, _pro = pro;
                        this.getName = _pro.getName ? function () {
                            return _pro.getName.apply(this, [_obj]);
                        } : function () {
                            if (!empty(_pro.name)) return _pro.name;
                        }
                        this.get = _pro.get ? function () {
                            return _pro.get.apply(this, [_obj]);
                        } : function () {
                            if (!empty(_pro.value)) return _pro.value;
                        }
                    }
                    var t = new Provider(o, pro);
                    paras.push(t);
                }
            });
            return paras;
        }

    }
});
$$.createModule("Component.input", function (api, module) {
    api.requireModules(["Component"]);

    var J = jQuery, util = api.util, type = util.type, empty = util.empty, getProxy = util.getProxy;
    var $o = util.object, $vir = $o.virtual, $component = $$.component, $input = $component.input;

    //文本组件
    (function () {
        var $text = $input.text = function (painter, validator) {
            $o.inherit(this, $input, painter, validator);
            var my = this;
            this.execReadOnly = function (o, b) {
                my.find(o, "input").prop("readOnly", b == false ? false : true);
            }
            this.execDisabled = function (o, b) {
                my.find(o, "input").prop("disabled", b == false ? false : true);
            }
            this.execSet = function (o, v) {
                my.find(o, "input").val(v);
            }
            this.execGet = function (o) {
                var v = my.find(o, "input").val();
                return v || "";
            }
            this.execReset = function (o) {
                o.set("", false);
            }

            this.onGive = function (o) { //give事件
                var p = my.find(o, "input");
                if (p) {
                    var jq = p.getJquery();
                    jq.on("blur.autoValidate", { obj: o }, function (e) { //追加自动验证事件
                        var o = e.data.obj;
                        o.validate(true);
                    });
                }
            }
        }

        $o.virtual($text, "give", function (o) {
            $o.callvir(this, $input, "give", o);
        });
        $o.virtual($text, "execBrowseData", function (o) { return o.get(); });

        //#region 验证器

        //#region 针对某一项逻辑的验证处理器

        var handlers = $input.validateHandlers = {};

        var requiredHandler = handlers.required = function (msg) { //必填处理器
            if (!msg) msg = "请输入{label}";
            this.exec = function (o, n, v) {
                if (o.para("required") && (empty(v) || v.length == 0)) throw new Error(msg.replace("{label}", n));
            }
        }

        var lengthHandler = handlers.length = function (msg) { //长度处理器
            if (!msg) msg = {};
            if (!msg.less) msg.less = "{label}的长度不能小于{min}";
            if (!msg.more) msg.more = "{label}的长度不能大于{max}";
            this.exec = function (o, n, v) {
                var t;
                if (ignoreValidate(o, v)) return;
                if ((t = o.para("min")) && v.length < t) {
                    throw new Error(msg.less.replace("{label}", n).replace("{min}", t));
                }
                else if ((t = o.para("max")) && v.length > t) {
                    throw new Error(msg.more.replace("{label}", n).replace("{max}", t));
                }
            }
        }

        function emailHandler() { //邮箱格式处理器
            this.exec = function (o, n, v) {
                if (ignoreValidate(o, v)) return;
                var r = /^[a-z0-9\u0391-\uFFE5]+([-|_|.]?[a-z0-9\u0391-\uFFE5]+)*@[a-z0-9\u0391-\uFFE5]+(-?[a-z0-9\u0391-\uFFE5]+)*\.[a-z\u0391-\uFFE5]{2,6}(\.[a-z\u0391-\uFFE5]{2,6})*$/i;
                if (!r.test(v)) throw new Error(n + "不是有效的邮箱地址格式");
            }
        }

        function urlHandler() { //url格式处理器
            this.exec = function (o, n, v) {
                if (ignoreValidate(o, v)) return;
                var s = "^((https|http|ftp|rtsp|mms)?://)?" // 
                + "(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?" // ftp的user@ 
                + "(([0-9]{1,3}.){3}[0-9]{1,3}" // IP形式的URL- 199.194.52.184 
                + "|" // 允许IP和DOMAIN（域名） 
                + "([0-9a-z_!~*'()-]+.)*" // 域名- www. 
                + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]." // 二级域名 
                + "[a-z]{2,6})" // first level domain- .com or .museum 
                + "(:[0-9]{1,4})?" // 端口- :80 
                + "((/?)|" // a slash isn't required if there is no file name 
                + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
                var r = new RegExp(s);
                if (!r.test(v)) throw new Error(n + "不是有效的url地址格式");
            }
        }

        function ignoreValidate(o, v) {
            if ((empty(v) || v.length == 0) && !o.para("required")) return true; //当没有输入，并且required不为true时，不用验证
            return false;
        }

        function passwordHandler() {//验证二次密码是否相同
            this.exec = function (o, n, v) {
                var p = o.para("target");
                if (!p) { return; }
                var _target = $$("#" + p);
                if (!_target) { throw new Error("没有找到二次密码的目标" + p); }
                if (v != _target.get()) {
                    throw new Error("两次输入的密码不同");
                }
            }
        }

        var numberMode = {
            "float": { reg: /^(-)?[0-9]+\.{0,1}[0-9]{0,2}$/, msg: "小数" },
            "int": { reg: /^(-)?\d+$/, msg: "整数" }
        };

        function numberHandler() {//数字验证器，可以指定整数、小数等
            this.exec = function (o, n, v) {
                var p = o.para("mode");
                var m = numberMode[p];
                if (!m) m = numberMode["float"]
                if (v) if (!m.reg.test(v)) { throw new Error("请输入" + m.msg); }
                validate();
                function validate() {//判断maxValue,minValue大小
                    var min = o.para("minValue"), max = o.para("maxValue"), pf = parseFloat;
                    if (!empty(min) && pf(v) < pf(min)) throw new Error(n + "不能小于" + min);
                    if (!empty(max) && pf(v) > pf(max)) throw new Error(n + "不能大于" + max);
                }
            }
        }

        function formatHandler() {//格式化验证器,format:规则，formatMessage:规则名称
            this.exec = function (o, n, v) {
                var p = o.para("format"), msg = o.para("formatMessage");
                if (p) {
                    if (!p.test(v)) throw new Error("请输入正确的" + (msg) ? msg : "规则");
                }
            }
        }

        //#endregion

        var $validator = $text.Validator = function () {
            $o.inherit(this, $input.validator);
            this.addHandler(new requiredHandler());
            this.addHandler(new lengthHandler());
        }

        $validator.text = function () {
            $o.inherit(this, $validator);
        }

        $validator.email = function () {
            $o.inherit(this, $validator);
            this.addHandler(new emailHandler());
        }

        $validator.url = function () {
            $o.inherit(this, $validator);
            this.addHandler(new urlHandler());
        }

        $validator.dateTime = function () {
            $o.inherit(this, $validator);
        }

        $validator.password = function () {
            $o.inherit(this, $validator);
            this.addHandler(new passwordHandler());
        }

        $validator.number = function () {
            $o.inherit(this, $validator);
            this.addHandler(new numberHandler());
        }
        //#endregion

        //#region 默认的绘画器

        $text.painter = function (methods) {
            $o.inherit(this, $input.painter, methods);
        }

        //#endregion

        //#region 工厂方法

        $input.createText = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.text());
        }
        $input.createEmail = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.email());
        }
        $input.createUrl = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.url());
        }

        $input.createTextarea = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.text());
        }

        $input.createPassword = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.password());
        }

        $input.createNumber = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.number());
        }

        $input.createVerifyCode = function (painter) {
            if (!painter) painter = new $text.painter();
            return new $text(painter, new $validator.text());
        }

        //#endregion


    })();

    //选择组件
    (function () {

        //#region 基类
        $select = $input.select = function (painter, validator) {
            $o.inherit(this, $input, painter, validator);
            var my = this;
            my.execReadOnly = function (o, b) {
                throw new Error("select组件没有实现readOnly方法");
            }
            my.execDisabled = function (o, b) {
                throw new Error("select组件没有实现disabled方法");
            }
        }

        $vir($select, "give", function (o) {
            $o.callvir(this, $input, "give", o); //调用父类方法
            var my = this;
            o.options = function (l) { return my.execOptions(this, l); } //作为选择控件，可以得到/设置选择项的集合
            var t = o.para("items");
            if (t) o.options(t); //解析完后，绑定选项
        });

        $vir($select, "execOptions", function (o, l) {
            var my = this;
            if (l) {//设置
                my.find(o, "coreContainer").proxy().bind({ items: l });
                o.para("items", l);
                var ops = my.find(o, "options").toArray();
                ops.each(function (i, e) {
                    my.initOption(o, $(e).proxy());
                });
                o.__options = ops;
                o.reset();

            } else {//得到
                return o.__options;
            }
        });

        $vir($select, "initOption", function (o, p) { p.input = o; }); //初始化选项，每个选项的input属性，指向组件自身

        //#region 验证器

        function requiredHandler() { //必填处理器
            this.exec = function (o, n, v) {
                if (!v) v = [];
                if (type(v) != 'array') v = [v];
                if (o.para("required") && v.length == 0) throw new Error("请选择" + n);
            }
        }

        function lengthHandler() { //选项个数处理器
            this.exec = function (o, n, v) {
                if (!v) v = [];
                if (type(v) != 'array') v = [v];
                var t;
                if (ignoreValidate(o, v)) return;
                if ((t = o.para("min")) && v.length < t) throw new Error(n + "的选项数不能少于" + t);
                else if ((t = o.para("max")) && v.length > t) throw new Error(n + "的选项数不能大于" + t);
            }
        }

        function ignoreValidate(o, v) {
            if (!o.para("required") && v.length == 0) return true; //当没有输入，并且required不为true时，不用验证
            return false;
        }

        $select.validator = function () {
            $o.inherit(this, $input.validator);
            this.addHandler(new requiredHandler());
            this.addHandler(new lengthHandler());
        }

        //#endregion

        //#region 单选基类
        var $single = $select.single = function (painter, validator) {
            $o.inherit(this, $select, painter, validator);

            this.execSelectItem = function (o, i) {
                if (empty(i)) { //获取
                    var c = null;
                    o.options().each(function (i, e) {
                        var t = $$(e);
                        if (t.selected()) { c = t; return false; }
                    });
                    return c;
                } else { //设置
                    var l = o.options();
                    if (i < 0 || i >= l.length) return;
                    var c = $$(l[i]);
                    c.selected(true);
                }
            }

            this.execGet = function (o) {
                var c = o.selectItem();
                return c ? c.value() : "";
            }
        }

        $vir($single, "execBrowseData", function (o) {
            var c = o.selectItem();
            return c ? c.getJquery().text() : "";
        });

        $vir($single, "give", function (o) {
            var my = this;
            o.selectItem = function (i) { return my.execSelectItem(this, i); } //单选组件，可以根据序号选择
            $o.callvir(this, $select, "give", o);
        });

        $vir($single, "execOptions", function (o, l) { return $o.callvir(this, $select, "execOptions", o, l); });

        $vir($single, "initOption", function (o, p) {
            $o.callvir(this, $select, "initOption", o, p);
            p.selectItem = function (b) {
                throw new Error("未实现selectItem方法");
            }
            p.value = function (v) {
                throw new Error("未实现value方法");
            }
            p.selected = function (b) {
                throw new Error("未实现selected方法");
            }
        });

        $vir($single, "execSet", function (o, v) {
            if (o.get() === v) return;
            var l = o.options(), c = o.selectItem(), n = l.first(function (i, e) { return util.equals($$(e).value(), v); });
            if (!n) return;
            else n = n.proxy();
            if (c) c.selected(false);
            n.selected(true);
            //o.execEvent("onchange", [o, v]);
        });

        $vir($single, "execReset", function (o) {
            var c = o.selectItem();
            if (c) c.selected(false);
            this.draw(o, "reset", c);//将旧项传给draw
            //o.execEvent("onchange", [o]);
        });

        //单选绘制器的基类
        $single.painter = function (methods) {
            $o.inherit(this, $input.painter, methods);
            this.findOptions = function (o) {
                return o.find("*[data-name='option']");
            }
        }
        //#endregion

        //#region 多选基类

        var $multi = $select.multi = function (painter, validator) {
            $o.inherit(this, $select, painter, validator);
            var my = this;

            /***如果有子类需要调用父类的方法，那么以下方法可以改写为虚方法***/

            this.execSelectAll = function (o, b) {
                if (b != false) b = true;
                var v = [];
                o.options().each(function (i, e) {
                    var p = $$(e);
                    p.selected(b);
                    if (b) v.push(p.value());
                });
                o.set(v);
            }

            this.execReverse = function (o) {
                var v = [];
                o.options().each(function (i, e) {
                    var p = $$(e);
                    p.selected(!p.selected());
                    if (p.selected()) v.push(p.value());
                });
                o.set(v);
            }

            this.execSelectItems = function (o, inds) {
                if (inds) {//设置
                    var vl = [], l = o.options(), sl = [];
                    for (var i = 0; i < inds.length; i++) {
                        var ind = inds[i];
                        if (ind < 0 || ind >= l.length) { alert("index范围非法!"); return; }
                        vl.push(l[ind].value);
                        sl.push(l[ind]);
                    }
                    o.set(vl);
                } else { //获取
                    var l = [];
                    o.options().each(function (i, e) {
                        var t = $$(e);
                        if (t.selected()) l.push(t);
                    });
                    return l;
                }
            }

            this.execSet = function (o, vl) {
                if (o.para("stringMode") || type(vl) == 'string') { //开启了字符串模式，值都以字符串的形式返回
                    o.para("stringMode", true);
                    var strValue = vl;
                    vl = strValue.split(',');
                }

                var l = o.options(), ol = o.selectItems(), nl = l.filterEx(function (k, e) {
                    var v = $$(e).value();
                    for (var i = 0; i < vl.length; i++) {
                        if (util.equals(vl[i], v)) return true;
                    }
                    return false;
                });

                var draw = my.draw;
                ol.each(function (i, e) {
                    var p = $$(e);
                    p.selected(false);
                    draw(o, "selectOption", p);
                });
                nl.each(function (i, e) {
                    var p = $$(e);
                    p.selected(true);
                    draw(o, "selectOption", p);
                });
                changeSelectItems(o);
            }

            this.execGet = function (o) {
                var vl = [];
                o.selectItems().each(function (i, e) {
                    vl.push($$(e).value());
                });

                if (o.para("stringMode")) { //开启了字符串模式，值都以字符串的形式返回
                    vl = vl.join(',');
                }
                return vl;
            }

            this.execReset = function (o) {
                var draw = my.draw;
                o.selectItems().each(function (i, e) {
                    var p = $$(e);
                    p.selected(false);
                    draw(o, "selectOption", p);
                });
                changeSelectItems(o);
            }
        }

        function changeSelectItems(o) { //o的选项被改变了
            o.execEvent("onchange", [o]);
        }

        $vir($multi, "execBrowseData", function (o) {
            var cc = o.selectItems(), l = [];
            cc.each(function () {
                var t = $(this);
                l.push(t.getJquery().text());
            });
            return l.join(" > ");
        });

        $vir($multi, "give", function (o) {
            var my = this;
            o.selectAll = function (b) { my.execSelectAll(this, b); };//全选
            o.reverse = function () { my.execReverse(this); };//反选
            o.selectItems = function (inds) { return my.execSelectItems(this, inds); }; //获取或设置被选择的项集合
            $o.callvir(this, $select, "give", o);
        });

        $vir($multi, "execOptions", function (o, l) { return $o.callvir(this, $select, "execOptions", o, l); });

        $vir($multi, "initOption", function (o, p) {
            var my = this;
            $o.callvir(this, $select, "initOption", o, p);

            p.selectItem = function (b) {
                var pt = this.getJquery().find("input");
                if (empty(b)) b = !pt.prop("checked");//没有强制设置选择状态，那么取反
                pt.prop("checked", b);
            }
            p.value = function (v) {
                var pt = this.getJquery().find("input");
                return pt.val();
            }
            p.selected = function (b) {
                var pt = this.getJquery().find("input");
                if (empty(b)) return pt.prop("checked");
                pt.prop("checked", b);
            }
        });

        //多选绘制器的基类
        $multi.painter = function (methods) {
            $o.inherit(this, $input.painter, methods);
            this.findOptions = function (o) {
                return o.find("*[data-name='option']");
            }
        }

        $vir($multi.painter, "drawBySelectOption", function (o, p) {
            //什么都不用做
        });

        //#endregion

        //#endregion

    })();
});

var $$metronic, $$bootbox;
$$.createModule("Wrapper.metronic", function (api, module) {
    var metro = $$metronic = $$.wrapper.metronic = {};
    var util = api.util, empty = util.empty;

    //#region initAjax

    metro.initAjax = function (o) { //提出ajax请求后，初始化metronic的核心机制
        if (!o) Metronic.initAjax();
        else {
            handleUniform(o);
            handleiCheck(o);
            handleBootstrapSwitch(o);
            handleDropdownHover(o);
            handleScrollers(o);
            handleSelect2(o);
            handleFancybox(o);
            handleDropdowns(o);
            handleTooltips(o);
            handleAccordions(o);
            handleBootstrapConfirmation(o);
        }
    }

    function handleUniform(o) {
        if (!$().uniform) {
            return;
        }
        var test = o.find("input[type=checkbox]:not(.toggle, .make-switch, .icheck), input[type=radio]:not(.toggle, .star, .make-switch, .icheck)");
        if (test.size() > 0) {
            test.each(function () {
                if ($(this).parents(".checker").size() === 0) {
                    $(this).show();
                    $(this).uniform();
                }
            });
        }
    };

    function handleiCheck(o) {
        if (!$().iCheck) {
            return;
        }

        o.find('.icheck').each(function () {
            var checkboxClass = $(this).attr('data-checkbox') ? $(this).attr('data-checkbox') : 'icheckbox_minimal-grey';
            var radioClass = $(this).attr('data-radio') ? $(this).attr('data-radio') : 'iradio_minimal-grey';

            if (checkboxClass.indexOf('_line') > -1 || radioClass.indexOf('_line') > -1) {
                $(this).iCheck({
                    checkboxClass: checkboxClass,
                    radioClass: radioClass,
                    insert: '<div class="icheck_line-icon"></div>' + $(this).attr("data-label")
                });
            } else {
                $(this).iCheck({
                    checkboxClass: checkboxClass,
                    radioClass: radioClass
                });
            }
        });
    };

    function handleBootstrapSwitch(o) {
        if (!$().bootstrapSwitch) {
            return;
        }
        o.find('.make-switch').bootstrapSwitch();
    };

    function handleDropdownHover(o) {
        o.find('[data-hover="dropdown"]').not('.hover-initialized').each(function () {
            $(this).dropdownHover();
            $(this).addClass('hover-initialized');
        });
    };

    function handleScrollers(o) {
        Metronic.initSlimScroll(o.find('.scroller'));
    };

    function handleSelect2(o) {
        if ($().select2) {
            o.find('.select2me').select2({
                placeholder: "Select",
                allowClear: true
            });
        }
    };

    function handleFancybox(o) {
        if (!jQuery.fancybox) {
            return;
        }

        if (o.find(".fancybox-button").size() > 0) {
            o.find(".fancybox-button").fancybox({
                groupAttr: 'data-rel',
                prevEffect: 'none',
                nextEffect: 'none',
                closeBtn: true,
                helpers: {
                    title: {
                        type: 'inside'
                    }
                }
            });
        }
    };

    function handleDropdowns(o) {
        o.on('click', '.dropdown-menu.hold-on-click', function (e) {
            e.stopPropagation();
        });
    };

    function handleTooltips(o) {
        o.find('.tooltips').tooltip();

        o.find('.portlet > .portlet-title .fullscreen').tooltip({
            container: 'body',
            title: 'Fullscreen'
        });
        o.find('.portlet > .portlet-title > .tools > .reload').tooltip({
            container: 'body',
            title: 'Reload'
        });
        o.find('.portlet > .portlet-title > .tools > .remove').tooltip({
            container: 'body',
            title: 'Remove'
        });
        o.find('.portlet > .portlet-title > .tools > .config').tooltip({
            container: 'body',
            title: 'Settings'
        });
        o.find('.portlet > .portlet-title > .tools > .collapse, .portlet > .portlet-title > .tools > .expand').tooltip({
            container: 'body',
            title: 'Collapse/Expand'
        });
    };

    function handleAccordions(o) {
        o.on('shown.bs.collapse', '.accordion.scrollable', function (e) {
            Metronic.scrollTo($(e.target));
        });
    };

    function handleBootstrapConfirmation(o) {
        if (!$().confirmation) {
            return;
        }
        o.find('[data-toggle=confirmation]').confirmation({ container: 'body', btnOkClass: 'btn-xs btn-success', btnCancelClass: 'btn-xs btn-danger' });
    }

    //#endregion

    //#region pageBar
    var bar = metro.pageBar = function () { //pageBar
        this.give = function (o) {
            o.bind = function (d) {
                processData(d);
                var e = $$(o.find(".page-breadcrumb")[0]);
                e.bind(d);
                o.data = d;
                if (o.onbind) o.onbind(o, d);
            }

            o.last = function () { //最后一项数据
                var items = o.data.items;
                return items[items.length - 1];
            }

            o.get = function () {
                var t = this.last();
                if (t) return t.value;
                return null;
            }

            o.items = function () { return o.data.items; }

            o.push = function (item) {
                o.data.items.push(item);
                o.bind(o.data);
            }

            o.pop = function (d) {
                if (d.isEnd) return;
                var items = o.data.items, i = d.index + 1;
                items.splice(i, items.length - i);
                o.bind(o.data);
            }

            function processData(d) {
                var last = d.items.length - 1;
                d.items.each(function (i, t) {
                    t.index = i;
                    t.isEnd = t.index == last;
                });
            }
            o.data = { items: [] };
        }
    }
    bar.onbind = function (item, d) {
        item = item.getJquery();
        item.prev().remove();
        item.next().remove();
        if (d.index == 0) {
            item.before("<i class=\"fa fa-home\"></i>");
        }
        if (!d.isEnd) {
            item.after("<i class=\"fa fa-angle-right\"></i>");
        }
        if (!d.url) {
            item.attr("href", "javascript:;");
        }
        if (d.click) {
            item.off("click.bar");
            item.on("click.bar", { item: d }, d.click);
        }

    }

    var modal = metro.modal = function () {
        this.give = function (o) {
            o.title = function (v) {
                var j = o.getJquery();
                if (empty(v)) return j.find(".modal-title").first().text();
                j.find(".modal-title").first().text(v);
            }
        }
    }

    //#endregion

    //#region alert
    var alert = metro.alert = function () {
        this.give = function (o) {
            o.alert = function (d) {
                if (!d) d = {};
                var j = this.getJquery(), id = j.attr("id");
                Metronic.alert({
                    container: '#' + id,
                    place: 'append',
                    type: d.type || 'info',
                    message: d.message,
                    close: d.close == false ? false : true,
                    reset: d.reset == false ? false : true,
                    focus: d.focus == false ? false : true,
                    closeInSeconds: d.seconds || 0,
                    icon: d.cion || ''
                });
                if (j.find('.close').size() == 1) j.children().addClass('alert-dismissable');
                else j.children().removeClass('alert-dismissable');
            }
            o.close = function () {
                this.getJquery().empty();
            }
        }

    }
    //#endregion

    var progressbar = metro.progressbar = function () {
        this.give = function (o) {
            o.update = function (p) {
                if (util.type(p) == 'number') p = { value: p };
                var d = this.getJquery().find('div');
                if (p.color) {
                    d.css('background-color', p.color);
                }
                d.attr('aria-valuenow', p.value).css('width', p.value + '%');
            }
        }
    }

    $$bootbox = $$metronic.bootbox = {};
    $$bootbox.alert = function (msg) {
        bootbox.alert({
            buttons: {
                ok: {
                    label: '确定',
                }
            },
            message: msg
        });
    }

    var form = metro.form = function () {
        this.give = function (o) {
            var my = o;
            o.alert = function (d) {
                my.findAlert().alert(d);
            }

            o.findAlert = function () {
                var id = '#formAlert_' + my.id;
                return $$(id);
            }

            o.check = function (r) {
                var a = my.findAlert();
                if (!r.satisfied()) a.alert({ message: r.message(), type: 'danger', seconds: 0, close: true });
                else a.close();
            }

            o.closeAlert = function () {
                my.findAlert().close();
            }
        }
    }


    //#region portlet
    var portlet = metro.portlet = function () {
        this.give = function (o) {

        }
    }

    var tab = metro.tab = function () {
        this.give = function (o) {
            util.object.callvir(this, $$.component.ui, "give", o);
            o.showItem = function (i) {
                $(this.getJquery().find('.nav li:visible')[i]).find('a').tab('show');
            }
            o.hideItem = function (i) {
                $(this.getJquery().find('.nav li:visible')[i]).hide();
                $(this.getJquery().find('.tab-pane:visible')[i]).hide();
            }
            o.index = function () {
                var l = this.getJquery().find('.nav li:visible');
                for (var i = 0; i < l.length; i++) {
                    var t = $(l[i]);
                    if (t.hasClass('active')) return i;
                }
                return -1;
            }
            o.count = function () {
                return this.getJquery().find('.nav li:visible').length;
            }
            init(o);
        }

        function init(o) {
            if (o.getEvent("select")) {
                o.getJquery().find('a[data-toggle="tab"]').on('shown.bs.tab', { o: o }, function (e) {
                    var o = e.data.o, t = $(e.target);
                    o.execEvent("select", [o, t]);
                });
            }
        }

    }

    //#endregion

    //#region todoList
    var todoList = metro.todoList = function () {
        this.give = function (o) {
            util.object.callvir(this, $$.component.ui, "give", o);
            o.load = function (p) {
                if (!p) p = {};
                var _this = this, req = new $$request();
                req.success = function (r) {
                    _this.bind({ rows: r.rows });
                    var j = o.getJquery(), color = ['red', 'green', 'purple', 'blue', 'yellow'];
                    j.find('.todo-tasklist-item').each(function (i, e) {
                        var index = i % color.length;
                        $(this).addClass("todo-tasklist-item-border-" + color[index]);
                    });
                    _this.execEvent("onload", [_this, r]);
                }
                var url = p.url || _this.para("url") || window.location.href;
                if (p && p.paras) req.add("paras", p.paras);
                req.submit({ url: url, action: _this.para("action") });
            }
        }
    }


    //#endregion
});